set.seed(1)
library(caret)
install.packages('recipes')
update.packages(ask = FALSE)
install.packages('recipes')
library(caret)
install.packages('recipes')
install.packages('recipes')
install.packages('rlang')
install.packages('recipes')
install.packages('vctrs')
install.packages('recipes')
install.packages('tibble')
install.packages('recipes')
library(caret)
read.csv('PitchData/PitchData.csv') -> data
data %>%
filter(Pitch_Type == 'Curveball') -> curveballs
curveballs %>%
mutate(
x_movement = abs(x_movement),
release_pos_x = abs(release_pos_x)
) -> curveballs
curveballs %>%
mutate(
whiff = ifelse(Pitch_Outcome == 'StrikeSwinging', 1, 0)
) -> curveballs
curveballs %>%
mutate_at(c('release_speed', 'x_movement', 'z_movement', 'release_spin_rate', 'spin_dir',
'release_pos_x', 'release_pos_z', 'release_extension', 'plate_x', 'plate_z'), function(x) {
(x - mean(x, na.rm = T)) / sd(x, na.rm = T)
}) %>%
na.omit() -> curveballs_standardized
curveballs_standardized[,15:24] -> curveballs_clustered
k2 <- kmeans(curveballs_clustered, centers = 2, nstart = 25)
k3 <- kmeans(curveballs_clustered, centers = 3, nstart = 25)
k4 <- kmeans(curveballs_clustered, centers = 4, nstart = 25)
k5 <- kmeans(curveballs_clustered, centers = 5, nstart = 25)
fviz_cluster(k2, geom = "point", data = curveballs_clustered) + ggtitle("k = 2")
fviz_cluster(k3, geom = "point", data = curveballs_clustered) + ggtitle("k = 3")
fviz_cluster(k4, geom = "point", data = curveballs_clustered) + ggtitle("k = 4")
fviz_cluster(k5, geom = "point", data = curveballs_clustered) + ggtitle("k = 5")
library(tidyverse)
library(cluster)
library(factoextra)
library(caret)
read.csv('PitchData/PitchData.csv') -> data
data %>%
filter(Pitch_Type == 'Curveball') -> curveballs
curveballs %>%
mutate(
x_movement = abs(x_movement),
release_pos_x = abs(release_pos_x)
) -> curveballs
curveballs %>%
mutate(
whiff = ifelse(Pitch_Outcome == 'StrikeSwinging', 1, 0)
) -> curveballs
curveballs %>%
mutate_at(c('release_speed', 'x_movement', 'z_movement', 'release_spin_rate', 'spin_dir',
'release_pos_x', 'release_pos_z', 'release_extension', 'plate_x', 'plate_z'), function(x) {
(x - mean(x, na.rm = T)) / sd(x, na.rm = T)
}) %>%
na.omit() -> curveballs_standardized
curveballs_standardized[,15:24] -> curveballs_clustered
k2 <- kmeans(curveballs_clustered, centers = 2, nstart = 25)
k3 <- kmeans(curveballs_clustered, centers = 3, nstart = 25)
k4 <- kmeans(curveballs_clustered, centers = 4, nstart = 25)
k5 <- kmeans(curveballs_clustered, centers = 5, nstart = 25)
fviz_cluster(k2, geom = "point", data = curveballs_clustered) + ggtitle("k = 2")
fviz_cluster(k3, geom = "point", data = curveballs_clustered) + ggtitle("k = 3")
fviz_cluster(k4, geom = "point", data = curveballs_clustered) + ggtitle("k = 4")
fviz_cluster(k5, geom = "point", data = curveballs_clustered) + ggtitle("k = 5")
curveballs_standardized %>%
mutate(
k2_cluster = k2$cluster,
k3_cluster = k3$cluster,
k4_cluster = k4$cluster,
k5_cluster = k5$cluster,
) -> curveballs_standardized
lapply(1:4, function(i) {
set.seed(1)
curveballs_standardized %>%
filter(k4_cluster == i) -> df
inds <- sample(1:nrow(df), .7 * nrow(df))
df[inds,] -> training
df[-inds,] -> testing
glm_fit = glm(whiff ~
Balls +
Strikes +
release_speed +
x_movement +
z_movement +
release_spin_rate +
spin_dir +
release_pos_x +
release_pos_z +
release_extension +
plate_x +
plate_z, training, family = 'binomial')
summary(glm_fit) %>%
print()
testing$whiff_pred <- predict(glm_fit, testing, type = 'response')
testing %>%
mutate(whiff_pred_binary = ifelse(whiff_pred > .5, 1, 0)) -> testing
table(testing$whiff, testing$whiff_pred_binary) %>%
print()
print(mean(testing$whiff == testing$whiff_pred_binary))
})
lapply(1:5, function(i) {
set.seed(1)
curveballs_standardized %>%
filter(k5_cluster == i) -> df
inds <- sample(1:nrow(df), .7 * nrow(df))
df[inds,] -> training
df[-inds,] -> testing
glm_fit = glm(whiff ~
Balls +
Strikes +
release_speed +
x_movement +
z_movement +
release_spin_rate +
spin_dir +
release_pos_x +
release_pos_z +
release_extension +
plate_x +
plate_z, training, family = 'binomial')
summary(glm_fit) %>%
print()
testing$whiff_pred <- predict(glm_fit, testing, type = 'response')
testing %>%
mutate(whiff_pred_binary = ifelse(whiff_pred > .5, 1, 0)) -> testing
table(testing$whiff, testing$whiff_pred_binary) %>%
print()
print(mean(testing$whiff == testing$whiff_pred_binary))
})
createDataPartition(curveballs_standardized$whiff, p = 0.7, list = FALSE)
inds <- createDataPartition(curveballs_standardized$whiff, p = 0.7, list = FALSE)
curveballs_standardized[inds,] -> training
curveballs_standardized[-inds,] -> testing
mean(training$whiff)
mean(testing$whiff)
inds <- createDataPartition(curveballs_standardized$whiff, p = 0.7, list = FALSE, groups = 2)
curveballs_standardized[inds,] -> training
mean(training$whiff)
mean(curveballs_standardized$whiff)
mean(curveballs_standardized$whiff) * nrow(curveballs_standardized)
set.seed(1)
inds <- createDataPartition(curveballs_standardized$whiff, p = 0.7, list = FALSE, groups = 2)
curveballs_standardized[inds,] -> training
curveballs_standardized[-inds,] -> testing
glm_fit = glm(whiff ~
Balls +
Strikes +
release_speed +
x_movement +
z_movement +
release_spin_rate +
spin_dir +
release_pos_x +
release_pos_z +
release_extension +
plate_x +
plate_z, training, family = 'binomial')
summary(glm_fit)
testing$whiff_pred <- predict(glm_fit, testing, type = 'response')
testing %>%
mutate(whiff_pred_binary = ifelse(whiff_pred > .5, 1, 0)) -> testing
table(testing$whiff, testing$whiff_pred_binary) %>%
print()
lapply(1:5, function(i) {
set.seed(1)
curveballs_standardized %>%
filter(k5_cluster == i) -> df
inds <- sample(1:nrow(df), .7 * nrow(df))
df[inds,] -> training
df[-inds,] -> testing
glm_fit = glm(whiff ~
Balls +
Strikes +
release_speed +
x_movement +
z_movement +
release_spin_rate +
spin_dir +
release_pos_x +
release_pos_z +
release_extension +
plate_x +
plate_z, training, family = 'binomial')
summary(glm_fit) %>%
print()
testing$whiff_pred <- predict(glm_fit, testing, type = 'response')
testing %>%
mutate(whiff_pred_binary = ifelse(whiff_pred > .5, 1, 0)) -> testing
table(testing$whiff, testing$whiff_pred_binary) %>%
print()
print(mean(testing$whiff == testing$whiff_pred_binary))
})
library(tidyverse)
library(cluster)
library(factoextra)
library(caret)
read.csv('PitchData/PitchData.csv') -> data
data %>%
filter(Pitch_Type == 'Curveball') -> curveballs
curveballs %>%
mutate(
x_movement = abs(x_movement),
release_pos_x = abs(release_pos_x)
) -> curveballs
curveballs %>%
mutate(
whiff = ifelse(Pitch_Outcome == 'StrikeSwinging', 1, 0)
) -> curveballs
curveballs %>%
mutate_at(c('release_speed', 'x_movement', 'z_movement', 'release_spin_rate', 'spin_dir',
'release_pos_x', 'release_pos_z', 'release_extension', 'plate_x', 'plate_z'), function(x) {
(x - mean(x, na.rm = T)) / sd(x, na.rm = T)
}) %>%
na.omit() -> curveballs_standardized
curveballs_standardized[,15:24] -> curveballs_clustered
k2 <- kmeans(curveballs_clustered, centers = 2, nstart = 25)
k3 <- kmeans(curveballs_clustered, centers = 3, nstart = 25)
k4 <- kmeans(curveballs_clustered, centers = 4, nstart = 25)
k5 <- kmeans(curveballs_clustered, centers = 5, nstart = 25)
fviz_cluster(k2, geom = "point", data = curveballs_clustered) + ggtitle("k = 2")
fviz_cluster(k3, geom = "point", data = curveballs_clustered) + ggtitle("k = 3")
fviz_cluster(k4, geom = "point", data = curveballs_clustered) + ggtitle("k = 4")
fviz_cluster(k5, geom = "point", data = curveballs_clustered) + ggtitle("k = 5")
k5
lapply(1:5, function(i) {
set.seed(1)
curveballs_standardized %>%
filter(k5_cluster == i) -> df
inds <- sample(1:nrow(df), .7 * nrow(df))
df[inds,] -> training
df[-inds,] -> testing
glm_fit = glm(whiff ~
Balls +
Strikes +
release_speed +
x_movement +
z_movement +
release_spin_rate +
spin_dir +
release_pos_x +
release_pos_z +
release_extension +
plate_x +
plate_z, training, family = 'binomial')
summary(glm_fit) %>%
print()
testing$whiff_pred <- predict(glm_fit, testing, type = 'response')
testing %>%
mutate(whiff_pred_binary = ifelse(whiff_pred > .5, 1, 0)) -> testing
table(testing$whiff, testing$whiff_pred_binary) %>%
print()
print(mean(testing$whiff == testing$whiff_pred_binary))
})
curveballs_standardized %>%
mutate(
k2_cluster = k2$cluster,
k3_cluster = k3$cluster,
k4_cluster = k4$cluster,
k5_cluster = k5$cluster,
) -> curveballs_standardized
lapply(1:5, function(i) {
set.seed(1)
curveballs_standardized %>%
filter(k5_cluster == i) -> df
inds <- sample(1:nrow(df), .7 * nrow(df))
df[inds,] -> training
df[-inds,] -> testing
glm_fit = glm(whiff ~
Balls +
Strikes +
release_speed +
x_movement +
z_movement +
release_spin_rate +
spin_dir +
release_pos_x +
release_pos_z +
release_extension +
plate_x +
plate_z, training, family = 'binomial')
summary(glm_fit) %>%
print()
testing$whiff_pred <- predict(glm_fit, testing, type = 'response')
testing %>%
mutate(whiff_pred_binary = ifelse(whiff_pred > .5, 1, 0)) -> testing
table(testing$whiff, testing$whiff_pred_binary) %>%
print()
print(mean(testing$whiff == testing$whiff_pred_binary))
})
lapply(1:4, function(i) {
set.seed(1)
curveballs_standardized %>%
filter(k4_cluster == i) -> df
inds <- sample(1:nrow(df), .7 * nrow(df))
df[inds,] -> training
df[-inds,] -> testing
glm_fit = glm(whiff ~
Balls +
Strikes +
release_speed +
x_movement +
z_movement +
release_spin_rate +
spin_dir +
release_pos_x +
release_pos_z +
release_extension +
plate_x +
plate_z, training, family = 'binomial')
summary(glm_fit) %>%
print()
testing$whiff_pred <- predict(glm_fit, testing, type = 'response')
testing %>%
mutate(whiff_pred_binary = ifelse(whiff_pred > .5, 1, 0)) -> testing
table(testing$whiff, testing$whiff_pred_binary) %>%
print()
print(mean(testing$whiff == testing$whiff_pred_binary))
})
lapply(1:3, function(i) {
set.seed(1)
curveballs_standardized %>%
filter(k3_cluster == i) -> df
inds <- sample(1:nrow(df), .7 * nrow(df))
df[inds,] -> training
df[-inds,] -> testing
glm_fit = glm(whiff ~
Balls +
Strikes +
release_speed +
x_movement +
z_movement +
release_spin_rate +
spin_dir +
release_pos_x +
release_pos_z +
release_extension +
plate_x +
plate_z, training, family = 'binomial')
summary(glm_fit) %>%
print()
testing$whiff_pred <- predict(glm_fit, testing, type = 'response')
testing %>%
mutate(whiff_pred_binary = ifelse(whiff_pred > .5, 1, 0)) -> testing
table(testing$whiff, testing$whiff_pred_binary) %>%
print()
print(mean(testing$whiff == testing$whiff_pred_binary))
})
lapply(1:4, function(i) {
set.seed(1)
curveballs_standardized %>%
filter(k4_cluster == i) -> df
inds <- sample(1:nrow(df), .7 * nrow(df))
df[inds,] -> training
df[-inds,] -> testing
glm_fit = glm(whiff ~
Balls +
Strikes +
release_speed +
x_movement +
z_movement +
release_spin_rate +
spin_dir +
release_pos_x +
release_pos_z +
release_extension +
plate_x +
plate_z, training, family = 'binomial')
summary(glm_fit) %>%
print()
testing$whiff_pred <- predict(glm_fit, testing, type = 'response')
testing %>%
mutate(whiff_pred_binary = ifelse(whiff_pred > .5, 1, 0)) -> testing
table(testing$whiff, testing$whiff_pred_binary) %>%
print()
print(mean(testing$whiff == testing$whiff_pred_binary))
})
lapply(1:5, function(i) {
set.seed(1)
curveballs_standardized %>%
filter(k5_cluster == i) -> df
inds <- sample(1:nrow(df), .7 * nrow(df))
df[inds,] -> training
df[-inds,] -> testing
glm_fit = glm(whiff ~
Balls +
Strikes +
release_speed +
x_movement +
z_movement +
release_spin_rate +
spin_dir +
release_pos_x +
release_pos_z +
release_extension +
plate_x +
plate_z, training, family = 'binomial')
summary(glm_fit) %>%
print()
testing$whiff_pred <- predict(glm_fit, testing, type = 'response')
testing %>%
mutate(whiff_pred_binary = ifelse(whiff_pred > .5, 1, 0)) -> testing
table(testing$whiff, testing$whiff_pred_binary) %>%
print()
print(mean(testing$whiff == testing$whiff_pred_binary))
})
lapply(1:3, function(i) {
set.seed(1)
curveballs_standardized %>%
filter(k3_cluster == i) -> df
inds <- sample(1:nrow(df), .7 * nrow(df))
df[inds,] -> training
df[-inds,] -> testing
glm_fit = glm(whiff ~
Balls +
Strikes +
release_speed +
x_movement +
z_movement +
release_spin_rate +
spin_dir +
release_pos_x +
release_pos_z +
release_extension +
plate_x +
plate_z, training, family = 'binomial')
summary(glm_fit) %>%
print()
testing$whiff_pred <- predict(glm_fit, testing, type = 'response')
testing %>%
mutate(whiff_pred_binary = ifelse(whiff_pred > .5, 1, 0)) -> testing
table(testing$whiff, testing$whiff_pred_binary) %>%
print()
print(mean(testing$whiff == testing$whiff_pred_binary))
})
set.seed(1)
inds <- createDataPartition(curveballs_standardized$whiff, p = 0.7, list = FALSE, groups = 2)
curveballs_standardized[inds,] -> training
curveballs_standardized[-inds,] -> testing
glm_fit = glm(whiff ~
Balls +
Strikes +
release_speed +
x_movement +
z_movement +
release_spin_rate +
spin_dir +
release_pos_x +
release_pos_z +
release_extension +
plate_x +
plate_z, training, family = 'binomial')
summary(glm_fit)
testing$whiff_pred <- predict(glm_fit, testing, type = 'response')
testing %>%
mutate(whiff_pred_binary = ifelse(whiff_pred > .5, 1, 0)) -> testing
table(testing$whiff, testing$whiff_pred_binary) %>%
print()
testing %>%
ggplot(aes(1, whiff_pred, color = whiff)) +
geom_point()
print(mean(testing$whiff == testing$whiff_pred_binary))
library(randomForest)
randomForest(whiff ~
Balls +
Strikes +
release_speed +
x_movement +
z_movement +
release_spin_rate +
spin_dir +
release_pos_x +
release_pos_z +
release_extension +
plate_x +
plate_z, training)
rf <- randomForest(whiff ~
Balls +
Strikes +
release_speed +
x_movement +
z_movement +
release_spin_rate +
spin_dir +
release_pos_x +
release_pos_z +
release_extension +
plate_x +
plate_z, training)
rf
which.min(model$mse)
which.min(rf$mse)
which.min(rf$mse)
sqrt(rf$mse[which.min(rf$mse)])
plot(rf)
varImpPlot(rf)
predict(rf, testing)
predict(rf, testing) -> testing$whiff_pred
View(testing)
testing %>%
mutate(whiff_pred_binary = ifelse(whiff_pred > .5, 1, 0)) -> testing
table(testing$whiff, testing$whiff_pred_binary) %>%
print()
print(mean(testing$whiff == testing$whiff_pred_binary))
